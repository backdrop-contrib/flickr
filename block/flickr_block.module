<?php
/**
 * @file
 * The Flickr block module
 */

require_once(drupal_get_path('module', 'flickr') . '/flickr.inc');

/**
 * Implements hook_help().
 */
function flickr_block_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flickr_block':
      // Return a line-break version of the README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_block_info().
 */
function flickr_block_info() {
  // User blocks.
  $blocks[0]['info'] = t("User (node author) recent Flickr photos tagged as term from node");
  $blocks[1]['info'] = t("User recent Flickr photosets");
  $blocks[2]['info'] = t("User (node author) random Flickr photos tagged as term from node");

  // Site wide blocks.
  $blocks[3]['info'] = t('Recent photos from a Flickr user');
  $blocks[4]['info'] = t('Recent photosets from a Flickr user');
  $blocks[5]['info'] = t('Random photos from a Flickr user');
  $blocks[6]['info'] = t('Recent photos from a Flickr group');

  // Photoset blocks.
  $blocks[7]['info'] = t('Random photos tagged as term from node from a Flickr photoset');
  $blocks[8]['info'] = t('Recent photos tagged as term from node from a Flickr photoset');

  // Returns a list of favorite public photos for the given user.
  $blocks[9]['info'] = t("Recent favorite public photos from a Flickr user");

  $blocks[10]['info'] = t("Random photos from a Flickr group");
  $blocks[11]['info'] = t("Random photos with a specific tag from a Flickr user");
  for ($i = 0; $i < 12; $i++) {
    $blocks[$i]['cache'] = DRUPAL_CACHE_GLOBAL;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function flickr_block_configure($delta = '') {
  // Remove the large and original sizes.
  $size_options = array();
  foreach (flickr_photo_sizes() as $size => $info) {
    $size_options[$size] = $info['label'] . ' - ' . $info['description'];
  }
  unset($size_options['b']);
  unset($size_options['o']);

  // Define all of the form element variables and retrieve existing values.
  $settings = variable_get('flickr_block_' . $delta, array(
    'user_id' => '',
    'show_n' => 4,
    'size' => 's',
    'tag' => '',
    'group_id' => '',
    'photoset_id' => '',
    'media' => 'photos',
    'vocab' => '',
  ));
  if (!isset($settings['tag'])) {
    $settings['tag'] = '';
  }
  if (!isset($settings['group_id'])) {
    $settings['group_id'] = '';
  }
  if (!isset($settings['photoset_id'])) {
    $settings['photoset_id'] = '';
  }
  if (!isset($settings['media'])) {
    $settings['media'] = 'photos';
  }
  if (!isset($settings['vocab'])) {
    $settings['vocab'] = '';
  }

  // Define all elements of the block parameters form.
  $form = array();
  $default_userid = variable_get('flickr_default_userid', '');
  $user_id = array_key_exists('user_id', $settings) ? $settings['user_id'] : '';
  $default = $user_id;
  if (!empty($default)) {
    $info = flickr_people_get_info($default);
    $default = $info['username']['_content'];
  }

  // Get a list of existing vocabularies.
  if (module_exists('taxonomy')) {
    $vocabulary = taxonomy_get_vocabularies();
    $checklist_vocab_array = array('0' => '<none>');
    foreach ($vocabulary as $item) {
      $key = $item->vid;
      $value = $item->name;
      $checklist_vocab_array[$key] = $value;
    }
  }

  // Require a user id if the site-wide default user has not been set.
  if (empty($default_userid)) {
    $form["flickr_block_{$delta}_user_id"] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr User Id'),
      '#default_value' => $default,
      '#required' => TRUE,
      '#description' => t("The user id of a Flickr user (ID number, username or email). Note that the sites's default Flickr user id has not been set."),
      '#element_validate' => array('flickr_userid_block_validate'),
    );
  }
  else {
    $info = flickr_people_get_info(variable_get('flickr_default_userid', ''));
    $form["flickr_block_{$delta}_user_id"] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr User Id'),
      '#default_value' => $default,
      '#description' => t("A Flickr user ID (ID number, username or email). If this is left blank, the sites's default user will be used. The current default Flickr user is") . " '<em>" . $info['username']['_content'] . "</em>'.",
      '#element_validate' => array('flickr_userid_block_validate'),
    );
  }

  $form["flickr_block_{$delta}_show_n"] = array(
    '#type' => 'textfield',
    '#title' => t('Show <em>n</em> photos'),
    '#required' => TRUE,
    '#default_value' => $settings['show_n'],
    '#description' => t("The block will display this many photos. Gets ignored for slideshows."),
    '#element_validate' => array('flickr_shown_block_validate'),
    '#size' => 2,
    '#maxlength' => 2,
  );
  $form["flickr_block_{$delta}_size"] = array(
    '#type' => 'select',
    '#options' => $size_options,
    '#title' => t('Size of photos'),
    '#default_value' => $settings['size'],
    '#description' => t("Select the size of photos you'd like to display in the block."),
  );
  $idgettr = l(t('Find your Flickr group ID.'), 'http://idgettr.com/', array(
    'attributes' => array(
      'title' => t('Use the URL of your group to find the Flickr ID.'),
      'target' => '_blank',
    ),
  ));
  $form["flickr_block_{$delta}_group_id"] = array(
    '#type' => 'textfield',
    '#title' => t('Flickr Group id'),
    '#default_value' => $settings['group_id'],
    '#required' => TRUE,
    '#description' => t("The numerical group id. !find_id", array('!find_id' => $idgettr)),
  );
  $form["flickr_block_{$delta}_media"] = array(
    '#type' => 'select',
    '#options' => array(
      'all' => t('all'),
      'photos' => t('photos'),
      'videos' => t('videos'),
    ),
    '#title' => t('Media type'),
    '#default_value' => $settings['media'],
    '#description' => t("Filter results by media type. Gets ignored for slideshows."),
  );
  // A note for dynamic user blocks.
  $form['flickr_block_note'] = array(
    '#markup' => t("<h3>NOTE</h3><strong>The block visibility setting for 'user' blocks are not only restricted by the user in the block configuration but also by the Flickr Block module.</strong> The block only gets displayed when the first argument of the path is 'user' or 'node' and a specific uid is available.<br /><br />Below you can change the block settings to exclude 'node/*' pages or show them only on 'user/*' pages.<br /><br />You can do it also the other way around to show a block only on a node page. Fine-grain it even more by selecting only a certain content type you want to show them on, for example blog posts."),
    '#weight' => 10,
  );

  // Build the block form - use unset to hide unwanted form elements.
  switch ($delta) {
    // User recent Flickr photosets.
    case 1:
      unset($form["flickr_block_{$delta}_user_id"]);
      unset($form["flickr_block_{$delta}_group_id"]);
      // Photoset, not photos.
      $form["flickr_block_{$delta}_show_n"]['#title'] = t('Show the last <em>n</em> photosets');
      $form["flickr_block_{$delta}_show_n"]['#description'] = t("The block will show this many of the user's photosets.");
      break;

    // User random Flickr photos.
    case 0:
    case 2:
      unset($form["flickr_block_{$delta}_user_id"]);
      unset($form["flickr_block_{$delta}_group_id"]);
      if (module_exists('taxonomy')) {
        $form["flickr_block_{$delta}_vocab"] = array(
          '#type'             => 'select',
          '#title'            => t('Filter by vocabulary'),
          '#position'         => 'left',
          '#options'          => $checklist_vocab_array,
          '#default_value'    => $settings['vocab'],
          '#description'      => t("Limit the Flickr images to those that have a Flickr tag similar to the terms found for the node the block is displayed on of a specific vocabulary. Case insensitive, matches any one tag (OR) or part of it.<br />Remember that Flickr removes spaces from multi word tags (e.g. 'beach trip' becomes 'beachtrip'). Use taxonomy terms without spaces in the vocabulary dedicated to Flickr.<br />For your content type, adjust the <em>Help text</em> of the used taxonomy field accordingly (e.g. at <em>admin/structure/types/manage/article/fields/field_tags</em>). The recommended widget type is <em>Autocomplete term widget (tagging)</em> with an <em>unlimited number of values</em>."),
        );
      }
      break;

    // Recent photos from a Flickr user.
    case 3:
      // Random photos from a Flickr user.
    case 5:
      // Recent favorite public photos from a Flickr user.
    case 9:
      unset($form["flickr_block_{$delta}_group_id"]);
      unset($form['flickr_block_note']);
      break;

    // Recent photosets from a Flickr user.
    case 4:
      unset($form["flickr_block_{$delta}_group_id"]);
      unset($form['flickr_block_note']);
      // Photoset, not photos.
      $form["flickr_block_{$delta}_show_n"]['#title'] = t('Show the last <em>n</em> photosets');
      $form["flickr_block_{$delta}_show_n"]['#description'] = t("The block will show this many of the user's photosets.");
      break;

    // Recent photos from a Flickr group.
    case 6:
      // Random photos from a Flickr group.
    case 10:
      unset($form["flickr_block_{$delta}_user_id"]);
      unset($form['flickr_block_note']);
      break;

    // Random photos from a Flickr photoset.
    case 7:
      // Recent photos from a Flickr photoset.
    case 8:
      unset($form["flickr_block_{$delta}_user_id"]);
      unset($form["flickr_block_{$delta}_group_id"]);
      unset($form['flickr_block_note']);
      $form["flickr_block_{$delta}_photoset"] = array(
        '#type' => 'textfield',
        '#title' => t('Flickr Photoset Id'),
        '#default_value' => $settings['photoset_id'],
        '#description' => t("The id of a Flickr photoset."),
        '#required' => TRUE,
      );
      if (module_exists('taxonomy')) {
        $form["flickr_block_{$delta}_vocab"] = array(
          '#type'             => 'select',
          '#title'            => t('Filter by vocabulary'),
          '#position'         => 'left',
          '#options'          => $checklist_vocab_array,
          '#default_value'    => $settings['vocab'],
          '#description'      => t("Limit the Flickr images to those that have a Flickr tag similar to the terms found for the node the block is displayed on of a specific vocabulary. Case insensitive, matches any one tag (OR) or part of it.<br />Remember that Flickr removes spaces from multi word tags (e.g. 'beach trip' becomes 'beachtrip'). Use taxonomy terms without spaces in the vocabulary dedicated to Flickr.<br />For your content type, adjust the <em>Help text</em> of the used taxonomy field accordingly (e.g. at <em>admin/structure/types/manage/article/fields/field_tags</em>). The recommended widget type is <em>Autocomplete term widget (tagging)</em> with an <em>unlimited number of values</em>."),
        );
      }
      break;

    // Random photos with a specific tag from a Flickr user.
    case 11:
      unset($form["flickr_block_{$delta}_group_id"]);
      unset($form['flickr_block_note']);
      $form["flickr_block_{$delta}_tag"] = array(
        '#type' => 'textfield',
        '#title' => t('Show photos having this tag'),
        '#default_value' => $settings['tag'],
        '#description' => t("Comma seperated tags for which you want media to display. Case insensitive, matches any one tag (OR) or part of it. Remember that Flickr removes spaces from multi word tags (e.g. 'beach trip' becomes 'beachtrip')."),
        '#required' => TRUE,
      );
      break;
  }
  return $form;
}

/**
 * Validate user input on 'user Flickr ID'.
 */
function flickr_userid_block_validate($element) {
  $uid = trim($element['#value']);
  if ($uid) {
    $user = flickr_user_find_by_identifier($uid);
    if (!$user) {
      form_set_error('flickr_block_{$delta}_user_id', t('<strong>Flickr User Id</strong>: %uid does not appear to be a valid Flickr user.', array('%uid' => $uid)));
    }
  }
}

/**
 * Validate user input on 'number shown'.
 */
function flickr_shown_block_validate($element) {
  if (!is_numeric($element['#value']) || $element['#value'] < 1) {
    form_set_error('flickr_block_{$delta}_show_n', t('<strong>Show <em>n</em> photos</strong>: Set a number from 1 to 99.'));
  }
}

/**
 * Implements hook_block_save().
 */
function flickr_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    // User recent Flickr photosets.
    case 1:
      variable_set('flickr_block_' . $delta, array(
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      cache_clear_all('flickr_block_' . $delta, 'cache', TRUE);
      break;

    // User Flickr photos.
    case 0:
    case 2:
      if (module_exists('taxonomy')) {
        variable_set('flickr_block_' . $delta, array(
          'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
          'size' => $edit["flickr_block_{$delta}_size"],
          'media' => $edit["flickr_block_{$delta}_media"],
          'vocab' => (int) $edit["flickr_block_{$delta}_vocab"],
        ));
      }
      else {
        variable_set('flickr_block_' . $delta, array(
          'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
          'size' => $edit["flickr_block_{$delta}_size"],
          'media' => $edit["flickr_block_{$delta}_media"],
          'vocab' => 0,
        ));
      }
      cache_clear_all('flickr_block_' . $delta, 'cache', TRUE);
      break;

    // Recent photos from a Flickr user.
    case 3:
      $userid = $edit["flickr_block_{$delta}_user_id"];
      if (!empty($userid)) {
        if (!flickr_is_nsid($edit["flickr_block_{$delta}_user_id"])) {
          if ($user = flickr_user_find_by_identifier($userid)) {
            drupal_set_message(t("The Flickr user associated with '%userid' has internally been replaced with the corresponding Flickr ID '%uid'.", array('%userid' => $edit["flickr_block_{$delta}_user_id"], '%uid' => $user)));
            $edit["flickr_block_{$delta}_user_id"] = $user;
          }
        }
        else {
          $info = flickr_people_get_info($edit["flickr_block_{$delta}_user_id"]);
          drupal_set_message(t("The Flickr user associated with '%uid' will be shown to you as Flickr user '%userid'.", array('%uid' => $edit["flickr_block_{$delta}_user_id"], '%userid' => $info['username']['_content'])));

        }
      }
      variable_set('flickr_block_' . $delta, array(
        'user_id' => $edit["flickr_block_{$delta}_user_id"],
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      $nsid = empty($edit["flickr_block_{$delta}_user_id"]) ? variable_get('flickr_default_userid', '') : $edit["flickr_block_{$delta}_user_id"];
      cache_clear_all('flickr_block_' . $delta . '_' . $nsid, 'cache', TRUE);
      break;

    // Recent photosets from a Flickr user.
    case 4:
      $userid = $edit["flickr_block_{$delta}_user_id"];
      if (!empty($userid)) {
        if (!flickr_is_nsid($edit["flickr_block_{$delta}_user_id"])) {
          if ($user = flickr_user_find_by_identifier($userid)) {
            drupal_set_message(t("The Flickr user associated with '%userid' has internally been replaced with the corresponding Flickr ID '%uid'.", array('%userid' => $edit["flickr_block_{$delta}_user_id"], '%uid' => $user)));
            $edit["flickr_block_{$delta}_user_id"] = $user;
          }
        }
        else {
          $info = flickr_people_get_info($edit["flickr_block_{$delta}_user_id"]);
          drupal_set_message(t("The Flickr user associated with '%uid' will be shown to you as Flickr user '%userid'.", array('%uid' => $edit["flickr_block_{$delta}_user_id"], '%userid' => $info['username']['_content'])));

        }
      }
      variable_set('flickr_block_' . $delta, array(
        'user_id' => $edit["flickr_block_{$delta}_user_id"],
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      $nsid = empty($edit["flickr_block_{$delta}_user_id"]) ? variable_get('flickr_default_userid', '') : $edit["flickr_block_{$delta}_user_id"];
      cache_clear_all('flickr_block_' . $delta . '_' . $nsid, 'cache', TRUE);
      break;

    // Random photos from a Flickr user.
    case 5:
      $userid = $edit["flickr_block_{$delta}_user_id"];
      if (!empty($userid)) {
        if (!flickr_is_nsid($edit["flickr_block_{$delta}_user_id"])) {
          if ($user = flickr_user_find_by_identifier($userid)) {
            drupal_set_message(t("The Flickr user associated with '%userid' has internally been replaced with the corresponding Flickr ID '%uid'.", array('%userid' => $edit["flickr_block_{$delta}_user_id"], '%uid' => $user)));
            $edit["flickr_block_{$delta}_user_id"] = $user;
          }
        }
        else {
          $info = flickr_people_get_info($edit["flickr_block_{$delta}_user_id"]);
          drupal_set_message(t("The Flickr user associated with '%uid' will be shown to you as Flickr user '%userid'.", array('%uid' => $edit["flickr_block_{$delta}_user_id"], '%userid' => $info['username']['_content'])));

        }
      }
      variable_set('flickr_block_' . $delta, array(
        'user_id' => $edit["flickr_block_{$delta}_user_id"],
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      $nsid = empty($edit["flickr_block_{$delta}_user_id"]) ? variable_get('flickr_default_userid', '') : $edit["flickr_block_{$delta}_user_id"];
      cache_clear_all('flickr_block_' . $delta . '_' . $nsid, 'cache', TRUE);
      break;

    // Recent photos from a Flickr group.
    case 6:
      variable_set('flickr_block_' . $delta, array(
        'group_id' => $edit["flickr_block_{$delta}_group_id"],
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      cache_clear_all('flickr_block_' . $delta . '_' . $edit["flickr_block_{$delta}_group_id"], 'cache', TRUE);
      break;

    // Random photos from a Flickr photoset.
    case 7:
    case 8:
      variable_set('flickr_block_' . $delta, array(
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
        'photoset_id' => $edit["flickr_block_{$delta}_photoset"],
        'vocab' => (int) $edit["flickr_block_{$delta}_vocab"],
      ));
      cache_clear_all('flickr_block_' . $delta . '_' . $edit["flickr_block_{$delta}_photoset"], 'cache', TRUE);
      break;

    // Recent photos from a Flickr photoset.
    case 18:
      variable_set('flickr_block_' . $delta, array(
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
        'photoset_id' => $edit["flickr_block_{$delta}_photoset"],
        'vocab' => (int) $edit["flickr_block_{$delta}_vocab"],
      ));
      cache_clear_all('flickr_block_' . $delta . '_' . $edit["flickr_block_{$delta}_photoset"], 'cache', TRUE);
      break;

    // Recent favorite public photos from a Flickr user.
    case 9:
      $userid = $edit["flickr_block_{$delta}_user_id"];
      if (!empty($userid)) {
        if (!flickr_is_nsid($edit["flickr_block_{$delta}_user_id"])) {
          if ($user = flickr_user_find_by_identifier($userid)) {
            drupal_set_message(t("The Flickr user associated with '%userid' has internally been replaced with the corresponding Flickr ID '%uid'.", array('%userid' => $edit["flickr_block_{$delta}_user_id"], '%uid' => $user)));
            $edit["flickr_block_{$delta}_user_id"] = $user;
          }
        }
        else {
          $info = flickr_people_get_info($edit["flickr_block_{$delta}_user_id"]);
          drupal_set_message(t("The Flickr user associated with '%uid' will be shown to you as Flickr user '%userid'.", array('%uid' => $edit["flickr_block_{$delta}_user_id"], '%userid' => $info['username']['_content'])));

        }
      }
      variable_set('flickr_block_' . $delta, array(
        'user_id' => $edit["flickr_block_{$delta}_user_id"],
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      $nsid = empty($edit["flickr_block_{$delta}_user_id"]) ? variable_get('flickr_default_userid', '') : $edit["flickr_block_{$delta}_user_id"];
      cache_clear_all('flickr_block_' . $delta . '_' . $nsid, 'cache', TRUE);
      break;

    // Random photos from a Flickr group.
    case 10:
      variable_set('flickr_block_' . $delta, array(
        'group_id' => $edit["flickr_block_{$delta}_group_id"],
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      cache_clear_all('flickr_block_' . $delta . '_' . $edit["flickr_block_{$delta}_group_id"], 'cache', TRUE);
      break;

    // Random photos with a specific tag from a Flickr user.
    case 11:
      $userid = $edit["flickr_block_{$delta}_user_id"];
      if (!empty($userid)) {
        if (!flickr_is_nsid($edit["flickr_block_{$delta}_user_id"])) {
          if ($user = flickr_user_find_by_identifier($userid)) {
            drupal_set_message(t("The Flickr user associated with '%userid' has internally been replaced with the corresponding Flickr ID '%uid'.", array('%userid' => $edit["flickr_block_{$delta}_user_id"], '%uid' => $user)));
            $edit["flickr_block_{$delta}_user_id"] = $user;
          }
        }
        else {
          $info = flickr_people_get_info($edit["flickr_block_{$delta}_user_id"]);
          drupal_set_message(t("The Flickr user associated with '%uid' will be shown to you as Flickr user '%userid'.", array('%uid' => $edit["flickr_block_{$delta}_user_id"], '%userid' => $info['username']['_content'])));

        }
      }
      variable_set('flickr_block_' . $delta, array(
        'user_id' => $edit["flickr_block_{$delta}_user_id"],
        // Remove whitespace from the tag list.
        'tag' => preg_replace('/\s+/', '', $edit["flickr_block_{$delta}_tag"]),
        'show_n' => (int) $edit["flickr_block_{$delta}_show_n"],
        'size' => $edit["flickr_block_{$delta}_size"],
        'media' => $edit["flickr_block_{$delta}_media"],
      ));
      $nsid = empty($edit["flickr_block_{$delta}_user_id"]) ? variable_get('flickr_default_userid', '') : $edit["flickr_block_{$delta}_user_id"];
      cache_clear_all('flickr_block_' . $delta . '_' . $nsid . '_' . $edit["flickr_block_{$delta}_tag"], 'cache', TRUE);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function flickr_block_view($delta = '') {
  $settings = variable_get('flickr_block_' . $delta, array(
    'user_id' => '',
    'show_n' => 4,
    'size' => 's',
    'tag' => '',
    'group_id' => '',
    'photoset_id' => '',
    'media' => 'photos',
    'vocab' => '',
  ));
  if (!isset($settings['tag'])) {
    $settings['tag'] = '';
  }
  if (!isset($settings['group_id'])) {
    $settings['group_id'] = '';
  }
  if (!isset($settings['photoset_id'])) {
    $settings['photoset_id'] = '';
  }
  if (!isset($settings['vocab'])) {
    $settings['vocab'] = '';
  }
  // Get the default user id as a fallback.
  if (empty($settings['user_id'])) {
    $settings['user_id'] = variable_get('flickr_default_userid');
  }
  $settings['user_id'] = flickr_user_find_by_identifier($settings['user_id']);
  $block = array();

  switch ($delta) {
    // User recent Flickr photos.
    case 0:
      // User recent Flickr photosets.
    case 1:
      // User random Flickr photos.
    case 2:
      // Get per user nsid if necessary.
      switch (arg(0)) {
        case 'user':
          if ($uid = (int) arg(1)) {
            $user = user_load($uid);
            $tags = '';
          }
        case 'node':
          if (($nid = (int) arg(1)) && ((arg(2) == "" || arg(2) == 'view'))) {
            $node = node_load($nid);
            $user = user_load($node->uid);
            if (module_exists('taxonomy')) {
              $taxonomy = taxonomy_vocabulary_load($settings['vocab']);
              $terms = (!empty($settings['vocab'])) ? field_view_field('node', $node, 'field_' . $taxonomy->machine_name) : '';
              if (!empty($terms)) {
                $i = 0;
                foreach ($terms['#items'] as $item) {
                  $tags[$i] = $terms['#items'][$i]['taxonomy_term']->name;
                  $i++;
                }
                $tags = implode(",", $tags);
              }
              else {
                $tags = '';
              }
            }
            else {
              $tags = '';
            }
            break;
          }
      }
      if (!empty($user->flickr['nsid'])) {
        $people = flickr_get_user_info($user->flickr['nsid']);
        $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
        $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'map/', array(
          'attributes' => array(
            'title' => t('View on Flickr map.'),
            'target' => '_blank',
          ),
        )) . ')' : '';
        switch ($delta) {
          // User recent Flickr photosets.
          case 1:
            $recent_sets = l(t('Recent Flickr sets'), $people['photosurl'] . 'sets/', array(
              'attributes' => array(
                'title' => t('View sets on Flickr.'),
                'target' => '_blank',
              ),
            ));
            $block['subject'] = t("!recent_sets by !username", array('!recent_sets' => $recent_sets, '!username' => $people['name']));
            $block['content'] = _flickr_block_photosets($user->flickr['nsid'], $settings['show_n'], $settings['size'], $settings['media'], $delta);
            break;

          // User Flickr photos.
          case 0:
          case 2:
            $recent = $delta == 2 ? '' : 'Recent ';
            $photos = l(t('@recentFlickr @media', array('@recent' => $recent, '@media' => $media)), $people['photosurl'], array(
              'attributes' => array(
                'title' => t('View Flickr photostream.'),
                'target' => '_blank',
              ),
            ));
            // The used tags with a space forced after the comma and the last
            // one replaced by 'or'.
            $tagged = (empty($tags)) ? '' : l(t("tagged <em>") . preg_replace('/(.*),/', '$1 ' . t('or'), str_replace(',', ', ', $tags)) . "</em>", $people['photosurl'] . 'tags/' . $tags, array(
              'attributes' => array(
                'title' => t('View tagged photos on Flickr.'),
                'target' => '_blank',
              ),
              'html' => TRUE,
            ));
            $block['subject'] = t("!photos !tags by !username !map", array(
              '!photos' => $photos,
              '!tags' => $tagged,
              '!username' => $people['name'],
              '!map' => $map,
            ));
            $random = $delta == 2 ? 1 : 0;
            $block['content'] = _flickr_user($user->flickr['nsid'], $settings['show_n'], $settings['size'], $settings['media'], $tags, $delta, $people, $random);
            break;

        }
      }
      break;

    // Recent photos from a Flickr user.
    case 3:
      $people = flickr_get_user_info($settings['user_id']);
      $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
      $recent_photos = l(t('Recent Flickr @media', array('@media' => $media)), $people['photosurl'], array(
        'attributes' => array(
          'title' => t('View on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'map/', array(
        'attributes' => array(
          'title' => t('View on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $block['subject'] = t("!recent_photos by !username !map", array(
        '!recent_photos' => $recent_photos,
        '!username' => $people['name'],
        '!map' => $map,
      ));
      $block['content'] = _flickr_user($settings['user_id'], $settings['show_n'], $settings['size'], $settings['media'], '', $delta, $people);
      break;

    // Recent photosets from a Flickr user.
    case 4:
      $people = flickr_get_user_info($settings['user_id']);
      $media = $settings['media'] == 'videos' ? ' ' . t('(shows videos only)') : '';
      $recent_sets = l(t('Recent Flickr sets@media', array('@media' => $media)), $people['photosurl'] . 'sets/', array(
        'attributes' => array(
          'title' => t('View sets on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $block['subject'] = t("!recent_sets by !username", array('!recent_sets' => $recent_sets, '!username' => $people['name']));
      $block['content'] = _flickr_block_photosets($settings['user_id'], $settings['show_n'], $settings['size'], $settings['media'], $delta, $people);
      break;

    // Random photos from a Flickr user.
    case 5:
      $people = flickr_get_user_info($settings['user_id']);
      $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'map/', array(
        'attributes' => array(
          'title' => t('View on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $photos = l(t('Flickr @media', array('@media' => $media)), $people['photosurl'], array(
        'attributes' => array(
          'title' => t('View Flickr photostream.'),
          'target' => '_blank',
        ),
      ));
      $block['subject'] = t("!photos by !username !map", array(
        '!photos' => $photos,
        '!username' => $people['name'],
        '!map' => $map,
      ));
      $block['content'] = _flickr_user($settings['user_id'], $settings['show_n'], $settings['size'], $settings['media'], '', $delta, $people, 1);
      break;

    // Recent photos from a Flickr group.
    case 6:
      $info = flickr_groups_getinfo($settings['group_id']);
      $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
      $group = l($info['group']['name']['_content'], 'https://www.flickr.com/groups/' . $settings['group_id'], array(
        'attributes' => array(
          'title' => t('View group on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), 'https://www.flickr.com/groups/' . $settings['group_id'] . '/pool/map', array(
        'attributes' => array(
          'title' => t('View group photos on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $block['subject'] = t("Recent Flickr @media from the group !group !map", array(
        '@media' => $media,
        '!group' => $group,
        '!map' => $map,
      ));
      $block['content'] = _flickr_group($settings['group_id'], $settings['show_n'], $settings['size'], $settings['media'], '', $delta, $info['group']['pool_count']['_content']);
      break;

    // Photos from a Flickr photoset.
    case 7:
    case 8:
      $recent = $delta == 7 ? '' : 'Recent ';
      $info = flickr_photoset_get_info($settings['photoset_id']);
      $people = flickr_get_user_info($info['owner']);
      $media = $settings['media'] == 'videos' ? t('Videos') : t('Photos');
      $photos = l(t('@recentFlickr @media', array('@recent' => $recent, '@media' => $media)), $people['photosurl'], array(
        'attributes' => array(
          'title' => t('View Flickr photostream.'),
          'target' => '_blank',
        ),
      ));
      if (($nid = (int) arg(1)) && ((arg(2) == "" || arg(2) == 'view'))) {
        $node = node_load($nid);
        if (module_exists('taxonomy')) {
          $taxonomy = taxonomy_vocabulary_load($settings['vocab']);
          $terms = (!empty($settings['vocab'])) ? field_view_field('node', $node, 'field_' . $taxonomy->machine_name) : '';
          if (!empty($terms)) {
            $i = 0;
            foreach ($terms['#items'] as $item) {
              $tags[$i] = $terms['#items'][$i]['taxonomy_term']->name;
              $i++;
            }
            $tags = implode(",", $tags);
          }
          else {
            $tags = '';
          }
        }
        else {
          $tags = '';
        }
      }
      // The used tags with a space forced after the comma and the last
      // one replaced by 'or'.
      $tagged = (empty($tags)) ? '' : l(t("tagged <em>") . preg_replace('/(.*),/', '$1 ' . t('or'), str_replace(',', ', ', $tags)) . "</em>", $people['photosurl'] . 'tags/' . $tags, array(
        'attributes' => array(
          'title' => t('View tagged photos on Flickr.'),
          'target' => '_blank',
        ),
        'html' => TRUE,
      ));
      $set = l($info['title']['_content'], $people['photosurl'] . 'sets/' . $settings['photoset_id'], array(
        'attributes' => array(
          'title' => t('View set on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'sets/' . $settings['photoset_id'] . '/map/', array(
        'attributes' => array(
          'title' => t('View set on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $block['subject'] = t("!photos !tags from Flickr set !set by !username !map", array(
              '!photos' => $photos,
        '!tags' => $tagged,
        '!set' => $set,
        '!username' => $people['name'],
        '!map' => $map,
      ));
      $block['content'] = _flickr_photoset($settings['photoset_id'], $settings['show_n'], $settings['size'], $settings['media'], $tags, $delta, 1);
      break;

    // Recent photos from a Flickr photoset.
    case 18:
      $info = flickr_photoset_get_info($settings['photoset_id']);
      $people = flickr_get_user_info($info['owner']);
      $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
      $set = l($info['title']['_content'], $people['photosurl'] . 'sets/' . $settings['photoset_id'], array(
        'attributes' => array(
          'title' => t('View set on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'sets/' . $settings['photoset_id'] . '/map/', array(
        'attributes' => array(
          'title' => t('View set on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $block['subject'] = t("Recent @media from Flickr set !set by !username !map", array(
        '@media' => $media,
        '!set' => $set,
        '!username' => $people['name'],
        '!map' => $map,
      ));
      $block['content'] = _flickr_photoset($info['owner'], $settings['show_n'], $settings['size'], $settings['media'], $settings['photoset_id'], $delta);
      break;

    // Recent favorite public photos from a Flickr user.
    case 9:
      $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
      $favorites = l(t("Favorite Flickr @media", array('@media' => $media)), 'https://www.flickr.com/photos/' . $settings['user_id'] . '/favorites/', array(
        'attributes' => array(
          'title' => t("View favorites on Flickr from other Flickr members."),
          'target' => '_blank',
        ),
      ));
      $block['subject'] = $favorites;
      $block['content'] = _flickr_block_favorite_public($settings['user_id'], $settings['show_n'], $settings['size'], $settings['media'], $delta);
      break;

    // Random photos from a Flickr group.
    case 10:
      $info = flickr_groups_getinfo($settings['group_id']);
      $media = $settings['media'] == 'videos' ? t('Videos') : t('Photos');
      $group = l($info['group']['name']['_content'], 'https://www.flickr.com/groups/' . $settings['group_id'], array(
        'attributes' => array(
          'title' => t('View group on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), 'https://www.flickr.com/groups/' . $settings['group_id'] . '/pool/map', array(
        'attributes' => array(
          'title' => t('View group photos on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $block['subject'] = t("@media from Flickr group !group !map", array(
        '@media' => $media,
        '!group' => $group,
        '!map' => $map,
      ));
      $block['content'] = _flickr_group($settings['group_id'], $settings['show_n'], $settings['size'], $settings['media'], '', $delta, $info['group']['pool_count']['_content'], 1);
      break;

    // Random photos with a specific tag from a Flickr user.
    case 11:
      $people = flickr_get_user_info($settings['user_id']);
      $media = $settings['media'] == 'videos' ? t('videos') : t('photos');
      // The used tags with a space forced after the comma and the last one
      // replaced by 'or'. In the link all whitespace is removed.
      $tagged = l(t("Flickr @media tagged <em>", array('@media' => $media)) . preg_replace('/(.*),/', '$1 ' . t('or'), preg_replace("/,([^\s])/", ", $1", $settings['tag'])) . "</em>", $people['photosurl'] . 'tags/' . $settings['tag'], array(
        'attributes' => array(
          'title' => t('View tagged photos on Flickr.'),
          'target' => '_blank',
        ),
        'html' => TRUE,
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'tags/' . $settings['tag'] . '/map/', array(
        'attributes' => array(
          'title' => t('View tagged photos on Flickr map.'),
          'target' => '_blank',
        ),
      )) . ')' : '';
      $block['subject'] = t("!tagged  by !username !map", array(
        '!username' => $people['name'],
        '!tagged' => $tagged,
        '!map' => $map,
      ));
      $block['content'] = _flickr_user($settings['user_id'], $settings['show_n'], $settings['size'], $settings['media'], $settings['tag'], $delta, $people, 1);
      break;
  }
  return $block;
}

/**
 * Photoset block. Block delta: 1 and 4.
 */
function _flickr_block_photosets($nsid, $show_n, $size, $media, $delta, $people = NULL) {
  if ($cache = cache_get('flickr_block_' . $delta . '_' . $nsid)) {
    $output = $cache->data;
  }
  else {
    $photosets = flickr_photoset_get_list($nsid);
    $output = '<div class="flickr-block-photosets">';
    $to = min($show_n, count($photosets));
    for ($i = 0; $i < $to; $i++) {
      $set_title = l($photosets[$i]['title']['_content'], $people['photosurl'] . 'sets/' . $photosets[$i]['id'], array(
        'attributes' => array(
          'title' => t('View set on Flickr.'),
          'target' => '_blank',
        ),
      ));
      $map = variable_get('flickr_block_maps', 1) ? '(' . l(t('map'), $people['photosurl'] . 'sets/' . $photosets[$i]['id'] . '/map/', array(
        'attributes' => array(
          'title' => t('View set on Flickr map.'),
          'target' => '_blank',
        ))) . ')' : '';
      $output .= '<div class="flickr-block-photoset"><div class="flickr-block-set-title">' . $set_title . ' ' . $map . '</div>';
      switch ($size) {
        case "x":
          $output .= theme('flickr_flickrcomslideshow', array(
            'id' => $photosets[$i]['id'],
          ));
          break;

        case "y":
          $output .= theme('flickr_flickrcomslideshow_simple', array(
            'id' => $photosets[$i]['id'],
          ));
          break;

        default:
          $output .= theme('flickr_photoset', array(
            'photoset' => $photosets[$i],
            'owner' => $nsid,
            'size' => $size,
            'media' => $media,
          ));
          // A counter if set to show.
          $flickr = l(t("set on Flickr"), $people['photosurl'] . 'sets/' . $photosets[$i]['id'] . '/', array(
            'attributes' => array(
              'title' => t('View set on Flickr.'),
              'target' => '_blank',
            ),
            'html' => TRUE,
          ));
          $count = t('@total in !flickr', array(
            '@total' => number_format($photosets[$i]['photos'], 0, ",", "."),
            '!flickr' => $flickr,
          ));
          $output .= variable_get('flickr_block_counter', 1) ? '<div class="flickr-counter">' . $count . '</div>' : '';
      }
      $output .= '</div>';
    }
    if ($i == 0) {
      $flickr = l(t("on Flickr"), $people['photosurl'] . 'sets/', array(
        'attributes' => array(
          'title' => t('View sets on Flickr.'),
          'target' => '_blank',
        ),
        'html' => TRUE,
      ));
      $output .= t('No sets found !flickr.', array('!flickr' => $flickr));
    }
    $output .= '</div>';
    cache_set('flickr_block_' . $delta . '_' . $nsid, $output, 'cache', time() + (variable_get('flickr_block_refresh_others', 31) * 60 * 60));
  }
  return $output;
}

/**
 * Favorites block. Block delta: 9.
 */
function _flickr_block_favorite_public($nsid, $show_n, $size, $media, $delta) {
  if ($cache = cache_get('flickr_block_' . $delta . '_' . $nsid)) {
    $output = $cache->data;
  }
  else {
    switch ($size) {
      case "x":
        $output = t('You cannot choose a slideshow for this block. Select a size.');
        drupal_set_message(t('You cannot choose a slideshow for this block.'), 'error');
        break;

      case "y":
        $output = t('You cannot choose a slideshow for this block. Select a size.');
        drupal_set_message(t('You cannot choose a slideshow for this block.'), 'error');
        break;

      default:
        $output = '';
        if ($photos = flickr_favorites_get_public_list($nsid, 1, array(
          'per_page' => $show_n,
        ))) {
          $i = 0;
          foreach ($photos['photo'] as $photo) {
            if ($media == $photo['media'] . 's' || $media == 'all') {
              $output .= theme('flickr_photo', array(
                'photo' => $photo,
                'size' => $size,
              ));
              $i++;
            }
          }
          $flickr = l(t("favorites on Flickr"), 'https://www.flickr.com/photos/' . $nsid . '/favorites/', array(
            'attributes' => array(
              'title' => t("View user's favorites on Flickr from other Flickr members."),
              'target' => '_blank',
            ),
            'html' => TRUE,
          ));
          if ($i == 0) {
            $output .= t('No media found !flickr.', array('!flickr' => $flickr));
            continue;
          }
          else {
            // A counter if set to show.
            $count = t('@number out of @total !flickr', array(
              '@number' => $i,
              '@total' => number_format($photos['total'], 0, ",", "."),
              '!flickr' => $flickr,
            ));
            $output .= variable_get('flickr_block_counter', 1) ? '<div class="flickr-counter">' . $count . '</div>' : '';
          }
        }
    }
    cache_set('flickr_block_' . $delta . '_' . $nsid, $output, 'cache', time() + (variable_get('flickr_block_refresh_others', 31) * 60 * 60));
  }
  return $output;
}
