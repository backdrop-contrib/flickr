<?php
/**
 * @file
 * The Flickr Block install hook
 */

/**
 * Implements hook_install().
 */
function flickr_block_install() {
  $t = get_t();
  // Create block config setting for all delta's.
  foreach (range(0, 16) as $delta) {
    $config = config('flickr_block.settings');
    $config->set('flickr_block_' . $delta, array(
      'user_id' => '',
      'group_id' => '',
      'photoset_id' => '',
      'show_n' => config_get('flickr.settings', 'flickr_photos_per_page'),
      'size' => config_get('flickr.settings', 'flickr_default_size_album'),
      'tag' => '',
      'sort' => 'unsorted',
      'filter' => '',
      'media' => 'photos',
      'vocab' => '',
      'geo' => '',
      'date' => '',
      'extend' => config_get('flickr.settings', 'flickr_extend'),
      'tag_mode' => 'context',
      'min_title' => config_get('flickr.settings', 'flickr_title_suppress_on_small'),
      'min_metadata' => config_get('flickr.settings', 'flickr_metadata_suppress_on_small'),
    ));
  }
  $config->save();

  if (function_exists('taxonomy_vocabulary_machine_name_load') && config_get('flickr.settings', 'flickr_smart') && !db_table_exists('field_data_field_flickr_tags')) {
    $vocab = new TaxonomyVocabulary(array(
      'name' => 'Flickr tags',
      'machine_name' => 'flickr_tags',
      'description' => $t('Grab Flickr photos with these tags only. Comma separated. You can exclude results that match a term by prepending it with a - character.'),
      'module' => 'flickr_block',
    ));
    taxonomy_vocabulary_save($vocab);

    $vocabulary = taxonomy_vocabulary_machine_name_load('flickr_tags');

    $field = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);

    $bundles = field_info_bundles($entity_type = 'node');
    foreach ($bundles as $bundle => $value) {
      $instance = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'entity_type' => 'node',
        'label' => $vocabulary->name,
        'bundle' => $bundle,
        'description' => $vocabulary->description,
        // Use the taxonomy autocomplete widget.
        'widget' => array(
          'type' => 'taxonomy_autocomplete',
          'weight' => 4,
        ),
        // Define how the terms will be displayed in full node and teaser mode.
        'display' => array(
          'default' => array(
            'label' => 'inline',
            'type' => 'taxonomy_term_reference_link',
            'weight' => 10,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'weight' => 10,
          ),
        ),
      );
      field_create_instance($instance);
    }

    $bundles = field_info_bundles($entity_type = 'user');
    foreach ($bundles as $bundle => $value) {
      $instance = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'entity_type' => 'user',
        'label' => $vocabulary->name,
        'bundle' => $bundle,
        'description' => $t("Limited the photos used from your Flickr account in Flickr blocks to those having a Flickr tag as indicated here (e.g. 'website' or 'blog'). Those have to be added to individual photos on Flickr as well. This is not necessary if the Flickr blocks themselves make use of the Flickr tags attached to a post, as the grabbed photos are filtered by those already. To do the opposite, exclude results that match a term by prepending it with a - character."),
        // Use the taxonomy autocomplete widget.
        'widget' => array(
          'type' => 'taxonomy_autocomplete',
          'weight' => 4,
        ),
        // Define how the terms will be displayed on the user profile.
        'display' => array(
          'default' => array(
            'type' => 'hidden',
            'weight' => 10,
          ),
        ),
      );
      field_create_instance($instance);
    }
    foreach (range(0, 16) as $delta) {
      config_set('flickr_block.settings', 'flickr_block_' . $delta, array(
        'vocab' => $vocabulary->vid,
      ));
    }
  }

  if (module_exists('date_popup') && config_get('flickr.settings', 'flickr_smart') && !db_table_exists('field_data_field_flickr_date')) {
    $field = array(
      'field_name' => 'field_flickr_date',
      'type' => 'datetime',
      'cardinality' => 1,
      'settings' => array(
        'repeat' => 0,
        'todate' => 'optional',
        'granularity' => array(
          'year' => 'year',
          'month' => 'month',
          'day' => 'day',
        ),
        'tz_handling' => 'none',
        'timezone_db' => '',
        'cache_enabled' => 1,
        'cache_count' => 2,
      ),
    );
    field_create_field($field);

    $bundles = field_info_bundles($entity_type = 'node');
    foreach ($bundles as $bundle => $value) {
      $instance = array(
        'field_name' => 'field_flickr_date',
        'entity_type' => 'node',
        'label' => $t('Flickr date taken'),
        'bundle' => $bundle,
        'description' => $t('Grab Flickr photos taken on or between these dates only.'),
        'widget' => array(
          'type' => 'date_popup',
          'weight' => 5,
          'settings' => array(
            'input_format' => 'Y-m-d H:i:s',
            'year_range' => '-100:+1',
            'increment' => 1,
          ),
        ),
        // Define how the terms will be displayed in full node and teaser mode.
        'display' => array(
          'default' => array(
            'type' => 'date_default',
            'format_type' => 'long',
            'settings' => array(
              'format_type' => 'long',
              'show_repeat_rule' => 'show',
              'multiple_number' => '',
              'multiple_from' => '',
              'multiple_to'  => '',
              'fromto' => 'both',
            ),
          ),
          'teaser' => array(
            'type' => 'hidden',
            'weight' => 10,
          ),
        ),
        'settings' => array(
          'default_value' => 'blank',
          'default_value2' => 'blank',
        ),
      );
      field_create_instance($instance);
    }

    if (isset($vocabulary)) {
      foreach (range(0, 16) as $delta) {
        config_set('flickr_block.settings', 'flickr_block_' . $delta, array(
          'vocab' => $vocabulary->vid,
          'date' => 'field_flickr_date',
        ));
      }
    }
    else {
      foreach (range(0, 16) as $delta) {
        config_set('flickr_block.settings', 'flickr_block_' . $delta, array(
          'date' => 'field_flickr_date',
        ));
      }
    }
  }

  if (module_exists('geofield') && config_get('flickr.settings', 'flickr_smart') && !db_table_exists('field_data_field_flickr_geo')) {
    $field = array(
      'translatable' => '0',
      'settings' => array(
        'backend' => 'default',
        'srid' => '4326',
      ),
      'field_name' => 'field_flickr_geo',
      'type' => 'geofield',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    );
    field_create_field($field);

    $bundles = field_info_bundles($entity_type = 'node');
    foreach ($bundles as $bundle => $value) {
      $instance = array(
        'field_name' => 'field_flickr_geo',
        'entity_type' => 'node',
        'label' => $t('Flickr location'),
        'bundle' => $bundle,
        'description' => $t('Grab Flickr photos near this location only.'),
        'required' => 0,
        'default_value' => NULL,
        'widget' => array(
          'weight' => '6',
          'type' => 'geofield_latlon',
          'active' => 1,
          'settings' => array(
            'html5_geolocation' => 0,
          ),
        ),
        // Define how the terms will be displayed in full node and teaser mode.
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'geofield_description',
            'weight' => '13',
            'settings' => array(
              'data' => 'centroid',
              'address' => 1,
            ),
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      );
      field_create_instance($instance);
    }

    if (isset($vocabulary) && module_exists('date_popup')) {
      foreach (range(0, 16) as $delta) {
        config_set('flickr_block.settings', 'flickr_block_' . $delta, array(
          'vocab' => $vocabulary->vid,
          'date' => 'field_flickr_date',
          'geo' => 'field_flickr_geo',
        ));
      }
    }
    elseif (module_exists('date_popup')) {
      foreach (range(0, 16) as $delta) {
        config_set('flickr_block.settings', 'flickr_block_' . $delta, array(
          'date' => 'field_flickr_date',
          'geo' => 'field_flickr_geo',
        ));
      }
    }
    else {
      foreach (range(0, 16) as $delta) {
        config_set('flickr_block.settings', 'flickr_block_' . $delta, array(
          'geo' => 'field_flickr_geo',
        ));
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function flickr_block_uninstall() {
  if (function_exists('taxonomy_vocabulary_machine_name_load')) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('flickr_tags');
    if ($vocabulary) {
//      field_delete_field('field_' . $vocabulary->machine_name);
//      taxonomy_vocabulary_delete($vocabulary->vid);
    }
  }
  $field = field_info_field('field_flickr_date');
  if ($field) {
    field_delete_field('field_flickr_date');
  }
  $field = field_info_field('field_flickr_geo');
  if ($field) {
    field_delete_field('field_flickr_geo');
  }
  field_purge_batch(500);
}

/**
 * Implements hook_update_last_removed().
 */
function flickr_block_last_removed() {
  return 7102;
}

/**
 * Move flickr settings from variables to config.
 */
function flickr_block_update_1000() {
  // Migrate variables to config.
  $config = config('flickr_filter.settings');
  $config->set('flickr_block_refresh_random', update_variable_get('flickr_block_refresh_random', 23));
  $config->set('flickr_block_refresh_others', update_variable_get('flickr_block_refresh_others', 31));
  $config->set('flickr_block_heading', update_variable_get('flickr_block_heading', 'h2'));
  $config->set('flickr_block_hide_empty', update_variable_get('flickr_block_hide_empty', 0));
  $config->set('flickr_block_photos_per_set', update_variable_get('flickr_block_photos_per_set', 6));
  foreach (range(0, 16) as $delta) {
    $config->set('flickr_block_' . $delta, update_variable_get('flickr_block_' . $delta, array(
      'user_id' => '',
      'group_id' => '',
      'photoset_id' => '',
      'show_n' => config_get('flickr.settings', 'flickr_photos_per_page'),
      'size' => config_get('flickr.settings', 'flickr_default_size_album'),
      'tag' => '',
      'sort' => 'unsorted',
      'filter' => '',
      'media' => 'photos',
      'vocab' => '',
      'geo' => '',
      'date' => '',
      'extend' => config_get('flickr.settings', 'flickr_extend'),
      'tag_mode' => 'context',
      'min_title' => config_get('flickr.settings', 'flickr_title_suppress_on_small'),
      'min_metadata' => config_get('flickr.settings', 'flickr_metadata_suppress_on_small'),
    )));
  }
  $config->save();

  // Delete variables.
  update_variable_del('flickr_block_refresh_random');
  update_variable_del('flickr_block_refresh_others');
  update_variable_del('flickr_block_heading');
  update_variable_del('flickr_block_hide_empty');
  update_variable_del('flickr_block_photos_per_set');
  foreach (range(0, 16) as $delta) {
    update_variable_del("flickr_block_{$delta}");
  }
}
