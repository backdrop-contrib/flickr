<?php
/**
 * @file
 * The Flickr Cache Warmer module.
 */

  // Load flickrstyle.admin.inc from the flickrstyle module.
  module_load_include('inc', 'flickrcachewarmer', 'flickrcachewarmer.admin');

/**
 * Implements hook_config_info().
 */
function flickrcachewarmer_config_info() {
  $prefixes['flickrcachewarmer.settings'] = array(
    'label' => t('Flickr Cache Warmer settings'),
    'group' => t('Flickr'),
  );
  return $prefixes;
}

/**
 * Implements hook_cron().
 *
 * Called every time the Backdrop cron runs.
 */
function flickrcachewarmer_cron() {
  $content_types = array_filter(config_get('flickrcachewarmer.settings', 'flickrcachewarmer_nodetypes'));
  // If no content types are selected in the settings, use all.
  if (empty($content_types)) {
    $names = node_type_get_names();
    $content_types = array_flip(array_map('check_plain', $names));
  }
  // Returns an array of nid's for selected content types.
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->fields('n', array('type'))
    ->condition('n.type', array_filter($content_types), 'IN')
    ->execute()
    ->fetchCol();
  // If the cache lifetime is substantially greater than the set cron
  // interval, cut the above array in chunks to batch process them.
  // Note it should currently not be used as we recommend to leave the cache
  // lifetime set to 'none'.
  $batchnumber = config_get('system.core', 'cache_lifetime') > (2 * config_get('system.core', 'cron_safe_threshold')) ? ceil(config_get('system.core', 'cache_lifetime') / config_get('system.core', 'cron_safe_threshold')) : 1;
  // Interrupt if no nodes are found.
  if (count($nids) == 0) {
    return;
  }
  $batchnumber = $batchnumber > count($nids) ? count($nids) : $batchnumber;
  $batchsize = ceil(count($nids) / $batchnumber);
  $nids = array_chunk($nids, $batchsize, FALSE);
  // If the batch 'ID' is an undefined index (offset), reset it to zero.
  $batch = config_get('flickrcachewarmer.settings', 'flickrcachewarmer_batch') > $batchnumber - 1 ? 0 : config_get('flickrcachewarmer.settings', 'flickrcachewarmer_batch');
  // Go ahead to warm the cache for a batch of nodes.
  flickrcachewarmer_run($nids[$batch]);
  // Next time we should do the next batch.
  config_set('flickrcachewarmer.settings', 'flickrcachewarmer_batch', $batch + 1);
  $nidslist = implode(', ', $nids[$batch]);
  $batchplusone = $batch + 1;
  $nextcw = format_interval(config_get('system.core', 'cron_safe_threshold'), 2);
  $ctlist = implode(', ', $content_types);
  $message = t("Cache of nodes successfully rebuilt for the selected content types. Node ID's: %nidslist. This was batch # %batchplusone out of a total of %batchnumber", array(
    '%nidslist' => $nidslist,
    '%batchplusone' => $batchplusone,
    '%batchnumber' => $batchnumber,
    )) . '.<br />' . t('The next cache warming will take place in %nextcw (every cron run) on the following content types: %ctlist.', array(
    '%nextcw' => $nextcw,
    '%ctlist' => $ctlist,
    ));
  backdrop_set_message($message, 'status', FALSE);
  watchdog('flickrcachewarmer', $message);
}

/**
 * Virtually visits all nodes of selected content types to ensure the cache of
 * these pages is rebuild to avoid long page loads for a real visitor.
 * Note that with the HEAD method the server MUST NOT return a message-body in
 * the response. It turns out Backdrop will rebuild the full page's cache anyway.
 */
function flickrcachewarmer_run($nids) {
  // Visit each node.
  foreach ($nids as $nid) {
    if ((config_get('flickr.settings', 'flickr_curl2') || !function_exists('stream_socket_client')) && function_exists('curl_version')) {
      $result = flickr_curl_http_request($GLOBALS['base_url'] . '/node/' . $nid, array(
        'method' => 'HEAD',
      ));
      $cmethod = 'cURL';
    }
    elseif (function_exists('stream_socket_client')) {
      $result = backdrop_http_request($GLOBALS['base_url'] . '/node/' . $nid, array(
        'method' => 'HEAD',
      ));
      $cmethod = 'stream_socket_client';
    }
    if (isset($result)) {
      if ($result->code != 200 && ($cmethod == 'stream_socket_client' || $cmethod == 'none') && function_exists('curl_version')) {
        // Try to use cURL when backdrop_http_request returns a different code
        // than 200 (valid request, no errors). Most likely are 403 (forbidden)
        // or 408 (Request Timeout).
        $result = flickr_curl_http_request($GLOBALS['base_url'] . '/node/' . $nid, array(
          'method' => 'HEAD',
        ));
        $cmethod = 'cURL';
        $message = t('Automatic fallback to the cURL connection method kicked in on nid %nid to handle the request. Result code from the failing request', array('%nid' => $nid)) . ': ' . $result->code;
        backdrop_set_message($message, 'warning', FALSE);
        watchdog('flickr', $message, array(), WATCHDOG_WARNING);
        // Even the cURL method returns an error.
        if ($result->code != 200) {
          // Debug info.
          if (config_get('flickr.settings', 'flickr_debug') == 2 && function_exists('dpm')) {
            dpm(t("Value of 'result' on nid %nid with error in 'function flickr_request()' with connection method '%cmethod' in 'flickr.inc'", array('%nid' => $nid, '%cmethod' => $cmethod)) . ':');
            dpm($result);
          }
          flickr_set_error(t("Could not connect to Flickr, Error: %error", array('%error' => $result->error)));
        }
      }
    }
    else {
      $message = t("There seems to be no connection method available on your server. Neither 'stream_socket_client' nor 'cURL'.");
      backdrop_set_message($message, 'error', FALSE);
      watchdog('flickr', $message, array(), WATCHDOG_ERROR);
    }
  }
}
