<?php
/**
 * @file
 * The Flickr filter module.
 */

require_once(drupal_get_path('module', 'flickr') . '/flickr.inc');

/**
 * Implements hook_help().
 */
function flickr_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flickr_filter':
      // Return a line-break version of the README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_filter_info().
 */
function flickr_filter_info() {
  $filters['flickr_filter'] = array(
    'title' => t('Flickr linker'),
    'description' => t('Allows you to Insert Flickr images: [flickr-photo:id=7357144724,size=m], [flickr-photoset:id=72157634563269642,size=s,num=8,media=all,random=true, count=false], [flickr-group:id=91484156@N00, size=q, num=8, tags=kids/men, media=all, random=true, count=false] or [flickr-user:id=98518260@N02, size=q, num=8, tags=kids/men, media=all, random=true, count=false].'),
    'process callback' => 'flickr_filter',
    'tips callback' => 'flickr_filter_tips',
    'weight' => 9,
  );
  return $filters;
}

/**
 * Returns the filter information for the filter help page.
 */
function flickr_filter_tips($filter, $format, $long = FALSE) {
  $idgettr = l(t('Find your Flickr user or group ID.'), 'http://idgettr.com/', array(
    'attributes' => array(
      'title' => t('Use the URL of your user or group to find the Flickr ID.'),
      'target' => '_blank',
    ),
  ));
  $config = l(t('set in config'), 'admin/config/media/flickr/', array(
    'attributes' => array(
      'title' => t('Go to Flickr configuration page'),
    ),
  ));
  $count = variable_get('flickr_block_counter', 1) ? 'true' : 'false';
  $output = t("Insert Flickr images: [<strong>flickr-photo:id</strong>=7357144724, size=m], [<strong>flickr-photoset:id</strong>=72157634563269642, size=s, num=8, media=all, random=true, count=false], [<strong>flickr-group:id</strong>=91484156@N00, size=q, num=8, tags=kids/men, media=all, random=true, count=false] or [<strong>flickr-user:id</strong>=98518260@N02, size=q, num=8, tags=kids/men, media=all, random=true, count=false].<br />!find_id Ommiting parameters the following <strong>default values</strong> will be used: <strong><em>size=@default_size</em></strong> (!config). Only for sets: <strong><em>num=@default_number</em></strong> (!config), <strong><em>media=photos</em></strong>, <strong><em>random=false</em></strong>, <strong><em>count=@default_count</em></strong> (!config).<br />Adding <strong><em>tags</em></strong> filters Flickr photos to those that are tagged as such, even partially and case insensitive (e.g. <em>'Beach'</em> matches <em>'beachtrip'</em>. Note that Flickr removes any whitespace from tags (e.g. <em>'Victoria park'</em> becomes <em>'victoriapark'</em>. Multiple tags should be seperated by a slash (/) and matches all photos that are tagged with at least one of those (OR).<br /><strong>Float single photos</strong>: Use [flickr-photo:id=9247386562, class=floatright], [flickr-photo:id=9247388074, size=m, style=float:left;] or use the <a href='https://drupal.org/project/autofloat'>AutoFloat module</a>.<br />Common sizes:<br /> s : small square 75<br /> t : thumbnail, 100 on longest side<br /> q : big square 150<br /> m : small, 240 on longest side<br /> n : small, 320 on longest side<br /> - : medium, 500 on longest side<br /> x: Flash responsive slideshow (for group, set and user IDs only)<br /> y: Basic responsive slideshow (for set and user IDs only)<br /> If the wrong size is applied, check if it exists on the Flickr photo page > Actions > View all sizes.", array(
    '!find_id' => $idgettr,
    '@default_size' => variable_get('flickr_default_size', 'm'),
    '@default_number' => variable_get('flickr_photos_per_page', 20),
    '@default_count' => $count,
    '!config' => $config,
  ));
  if ($long) {
    $output .= ' ' . t('The size parameter can be one of the following:');
    $items = array();
    foreach (flickr_photo_sizes() as $key => $text) {
      $items[] = "<code>$key</code> &mdash; (" . $text['label'] . ') ' . $text['description'];
    }
    $output .= theme('item_list', array('items' => $items));
  }
  return $output;
}

/**
 * Processes the flickr filter.
 */
function flickr_filter($text, $filter) {
  $text = preg_replace_callback('/\[flickr-photo:(.+?)\]/', 'flickr_filter_callback_photo', $text);
  $text = preg_replace_callback('/\[flickr-photoset:(.+?)\]/', 'flickr_filter_callback_photoset', $text);
  $text = preg_replace_callback('/\[flickr-group:(.+?)\]/', 'flickr_filter_callback_group', $text);
  $text = preg_replace_callback('/\[flickr-user:(.+?)\]/', 'flickr_filter_callback_user', $text);
  return $text;
}

/**
 * Parse parameters to the fiter from a format like:
 * id=26159919@N00, size=m,num=9,class=something,style=float:left;border:1px
 * into an associative array with two sub-arrays. The first sub-array are
 * parameters for the request, the second are HTML attributes (class and style).
 */
function flickr_filter_split_config($string) {
  $config = array();
  $attribs = array();
  // Remove whitespace.
  $string = preg_replace('/\s+/', '', $string);
  // Put each setting on its own line.
  $string = str_replace(',', "\n", $string);
  // Break them up around commas.
  preg_match_all('/([a-zA-Z]+)=([-@\/0-9a-zA-Z :;]+)/', $string, $parts, PREG_SET_ORDER);
  foreach ($parts as $part) {
    // Normalize to lowercase and remove extra spaces.
    $name = strtolower(trim($part[1]));
    $value = trim($part[2]);
    if ($name == 'style' || $name == 'class') {
      $attribs[$name] = $value;
    }
    else {
      $config[$name] = $value;
    }
  }
  return array($config, $attribs);
}

/**
 * Filter callback for a photo.
 */
function flickr_filter_callback_photo($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);
  if (isset($config['id'])) {
    if ($photo = flickr_photo_get_info($config['id'])) {
      if (!isset($config['size'])) {
        $config['size'] = variable_get('flickr_default_size', 'm');
      }
      switch ($config['size']) {
        case "x":
        case "y":
          drupal_set_message(t("You can only use a slideshow for set, user or group IDs."), 'error');
          $config['size'] = variable_get('flickr_default_size', 'm');
          break;
      }
      return theme('flickr_photo', array(
        'photo' => $photo,
        'size' => $config['size'],
        'attribs' => $attribs,
      ));
    }
  }
  return '';
}

/**
 * Filter callback for a photoset.
 */
function flickr_filter_callback_photoset($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);

  if (isset($config['id'])) {
    if ($photoset = flickr_photoset_get_info($config['id'])) {
      if (!isset($config['size'])) {
        $config['size'] = variable_get('flickr_default_size', 'm');
      }
      if (!isset($config['num'])) {
        $config['num'] = variable_get('flickr_photos_per_page', 20);
      }
      if (!isset($config['media'])) {
        $config['media'] = 'photos';
      }
      if (!isset($config['random'])) {
        $config['random'] = 'false';
      }
      if (!isset($config['count'])) {
        $config['count'] = variable_get('flickr_block_counter', 1) ? 'true' : 'false';
      }
      $config['random'] = $config['random'] == 'true' ? 1 : 0;
      $output = "<div class='flickr-photoset'>\n";
      // Choose between 'recent' or 'random' based on 'random' parameter.
      // We abuse $delta parameter to override preference of counter display.
      $output .= _flickr_photoset($photoset['owner'], $config['num'], $config['size'], $config['media'], $photoset['id'], $config['count'], $config['random']);
      $output .= '</div>';
      return $output;
    }
  }
  return '';
}

/**
 * Filter callback for a group.
 */
function flickr_filter_callback_group($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);

  if (isset($config['id'])) {
    if ($info = flickr_groups_getinfo($config['id'])) {
      if (!isset($config['size'])) {
        $config['size'] = variable_get('flickr_default_size', 'm');
      }
      if (!isset($config['num'])) {
        $config['num'] = variable_get('flickr_photos_per_page', 20);
      }
      if (!isset($config['media'])) {
        $config['media'] = 'photos';
      }
      if (!isset($config['random'])) {
        $config['random'] = 'false';
      }
      if (!isset($config['tags'])) {
        $config['tags'] = '';
      }
      else {
        $config['tags'] = str_replace("/", ",", $config['tags']);
      }
      if (!isset($config['count'])) {
        $config['count'] = variable_get('flickr_block_counter', 1) ? 'true' : 'false';
      }
      $config['random'] = $config['random'] == 'true' ? 1 : 0;
      $output = "<div class='flickr-photoset'>\n";
      // Choose between 'recent' or 'random' based on 'random' parameter.
      // We abuse $delta parameter to override preference of counter display.
      $output .= _flickr_group($config['id'], $config['num'], $config['size'], $config['media'], $config['tags'], $config['count'], $info['group']['pool_count']['_content'], $config['random']);
      $output .= '</div>';
      return $output;
    }
  }
  return '';
}

/**
 * Filter callback for a user.
 */
function flickr_filter_callback_user($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);

  if (isset($config['id'])) {
    if ($people = flickr_get_user_info($config['id'])) {
      if (!isset($config['size'])) {
        $config['size'] = variable_get('flickr_default_size', 'm');
      }
      if (!isset($config['num'])) {
        $config['num'] = variable_get('flickr_photos_per_page', 20);
      }
      if (!isset($config['media'])) {
        $config['media'] = 'photos';
      }
      if (!isset($config['random'])) {
        $config['random'] = 'false';
      }
      if (!isset($config['tags'])) {
        $config['tags'] = '';
      }
      else {
        $config['tags'] = str_replace("/", ",", $config['tags']);
      }
      if (!isset($config['count'])) {
        $config['count'] = variable_get('flickr_block_counter', 1) ? 'true' : 'false';
      }
      $config['random'] = $config['random'] == 'true' ? 1 : 0;
      $output = "<div class='flickr-photoset'>\n";
      // Choose between 'recent' or 'random' based on 'random' parameter.
      // We abuse $delta parameter to override preference of counter display.
      $output .= _flickr_user($config['id'], $config['num'], $config['size'], $config['media'], $config['tags'], $config['count'], $people, $config['random']);
      $output .= '</div>';
      return $output;
    }
  }
  return '';
}
