<?php
/**
 * @file
 * The Flickr filter module.
 */

/**
 * Implements hook_help().
 */
function flickr_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flickr_filter':
      // Return a line-break version of the README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_filter_info().
 */
function flickr_filter_info() {
  $filters['flickr_filter'] = array(
    'title' => t('Flickr Filter'),
    'description' => t('Allows you to Insert Flickr images: [flickr-photo:id=7357144724,size=m], [flickr-photoset:id=72157634563269642,size=s,num=8,media=all,random=true, count=false], [flickr-group:id=91484156@N00, size=q, num=8, tags=southsea, media=all, random=true, count=false], [flickr-user:id=98518260@N02, size=q, num=8, tags=kids/men, media=all, random=true, count=false] or [flickr-favorites:id=lolandese, size=q, num=8, tags=tomosborn/people, media=all, random=true, count=false].'),
    'process callback' => 'flickr_filter',
    'tips callback' => 'flickr_filter_tips',
    'weight' => 9,
  );
  return $filters;
}

/**
 * Returns the filter information for the filter help page.
 */
function flickr_filter_tips($filter, $format, $long = FALSE) {
  $idgettr = l(t('Find a Flickr group ID.'), 'http://idgettr.com/', array(
    'attributes' => array(
      'title' => t('Use the URL of your group to find the Flickr ID.'),
      'target' => '_blank',
    ),
  ));
  $config = l(t('set in config'), 'admin/config/media/flickr/', array(
    'attributes' => array(
      'title' => t('Go to Flickr configuration page'),
    ),
  ));
  $count = variable_get('flickr_counter', 1) ? 'true' : 'false';
  $output = t("Insert Flickr images:
<ul>
<li>[flickr-<strong>photo</strong>:id=7357144724, size=m, mintitle=999, minmetadata=999]</li>
<li>[flickr-<strong>photoset</strong>:id=72157634563269642, size=s, num=8, tags=kids/men, media=all, random=true, count=false, mintitle=999, minmetadata=999, heading=none]</li>
<li>[flickr-<strong>group</strong>:id=91484156@N00, size=q, num=8, tags=flowers, media=all, random=true, count=false, mintitle=999, minmetadata=999, heading=none]</li>
<li>[flickr-<strong>user</strong>:id=lolandese1, size=q, num=6, tags=kids/men, media=all, random=true, count=false, mintitle=999, minmetadata=999, heading=none]</li>
<li>[flickr-<strong>favorites</strong>:id=lolandese, size=q, num=4, tags=tomosborn/people, media=all, random=true, count=false, mintitle=999, minmetadata=999, heading=none]</li>
</ul><br />
Float single photos: Use [flickr-photo:id=9247386562, <strong>class=floatright</strong>], [flickr-photo:id=9247388074, <strong>style=float:left;</strong>] or use the AutoFloat module.<br /><br />
Common sizes:<br />
s : small square 75<br />
t : thumbnail, 100 on longest side<br />
q : big square 150<br />
m : small, 240 on longest side<br />
n : small, 320 on longest side<br />
- : medium, 500 on longest side<br />
x: Flash responsive slideshow (for group, set and user IDs only)<br />
y: Basic responsive slideshow (for set and user IDs only)<br />
<strong>TAKE CARE, n (320px) and c (800px) sizes are missing on many \"older\" Flickr images! Check if it exists on the Flickr photo page > Actions > View all sizes.</strong><br /><br />
Parameter examples (omit parameters to use the default values):<br />
<strong>id=lolandese1</strong> A photo, photoset, user or group ID. Omit to use CC licensed Public photos. !find_id<br />&nbsp;&nbsp;Valid input for a user: numeric ID (the one that contains '@'), alias (from URL if it exists), Flickr username or the user's email.<br />
<strong>class=floatleft foo bar</strong> : Note that no quotes are used and a space to separate multiple classes.<br />
<strong>style=float:left; border:solid 2px;</strong> : Note that no quotes are used, but with a semicolons between styles.<br />
<strong>size=q</strong> : Display size big square (150px). The sizes x and y display a slideshow and ignore number, media, tags and random settings. Default: size=@default_size (!config).<br />
<strong>num=4</strong> : Display 4 photos. Default: num=@default_number (!config).<br />&nbsp;&nbsp;If set to 1, the single image will behave as such. Heading and counter will be omitted, and float might apply. Used to display a single changing random or recent image.<br />
<strong>media=all</strong> : Display both photos and videos. Default: media=photos<br />
<strong>tags=kids/men</strong> : <strong>Separate multiple tags with a slash (/).</strong> Display all set, group or user photos that contain the indicated tags. Case insensitive, matches any tag, for photosets even partial.<br />&nbsp;&nbsp;Multiple tags for groups will only query the last 500 photos on Flickr. Note that Flickr removes any whitespace from tags (e.g. 'Victoria park' becomes 'victoriapark').<br />
<strong>heading=h3</strong> : Wraps the album title in HTML tags. Use 'p' to apply no style or 'none' to suppress the title. Default heading=@default_heading (!config).<br />
<strong>random=false</strong> : Display the newest photos first (reverse cronological order). Default: random=false<br />
<strong>count=false</strong> : Suppress display of the counter under the album (e.g. <em>5 out of 124 on Flickr</em>). Default: count=@default_count (!config).<br />
<strong>mintitle=999</strong> : Suppress display of the title in the photo captions for images below a width of 999 px. Default: mintitle=@default_mintitle (!config).<br />
<strong>minmetadata=999</strong> : Suppress display of the metadata in the photo captions for images below a width of 999 px. Default: minmetadata=@default_minmetadata (!config).", array(
  '!find_id' => $idgettr,
  '@default_size' => variable_get('flickr_default_size', 'm'),
  '@default_number' => variable_get('flickr_photos_per_page', 20),
  '@default_mintitle' => variable_get('flickr_title_suppress_on_small', '100'),
  '@default_minmetadata' => variable_get('flickr_metadata_suppress_on_small', '150'),
  '@default_heading' => variable_get('flickr_filter_heading', 'p'),
  '@default_count' => $count,
  '!config' => $config,
  ));
  if ($long) {
    $output .= ' ' . t('The size parameter can be one of the following:');
    $items = array();
    foreach (flickr_photo_sizes() as $key => $text) {
      $items[] = "<code>$key</code> &mdash; (" . $text['label'] . ') ' . $text['description'];
    }
    $output .= theme('item_list', array('items' => $items));
  }
  return $output;
}

/**
 * Processes the flickr filter.
 */
function flickr_filter($text, $filter) {
  $text = preg_replace_callback('/\[flickr-photo:(.+?)\]/', 'flickr_filter_callback_photo', $text);
  $text = preg_replace_callback('/\[flickr-photoset:(.+?)\]/', 'flickr_filter_callback_album', $text);
  $text = preg_replace_callback('/\[flickr-group:(.+?)\]/', 'flickr_filter_callback_album', $text);
  $text = preg_replace_callback('/\[flickr-user:(.+?)\]/', 'flickr_filter_callback_album', $text);
  $text = preg_replace_callback('/\[flickr-favorites:(.+?)\]/', 'flickr_filter_callback_favorites', $text);
  return $text;
}

/**
 * Parse parameters to the fiter from a format like:
 * id=26159919@N00, size=m,num=9,class=something,style=float:left;border:1px
 * into an associative array with two sub-arrays. The first sub-array are
 * parameters for the request, the second are HTML attributes (class and style).
 */
function flickr_filter_split_config($string) {
  $config = array();
  $attribs = array();
  // Remove whitespace.
  $string = preg_replace('/\s+/', '', $string);
  // Put each setting on its own line.
  $string = str_replace(',', "\n", $string);
  // Break them up around commas.
  preg_match_all('/([a-zA-Z]+)=([-@\/0-9a-zA-Z :;]+)/', $string, $parts, PREG_SET_ORDER);
  foreach ($parts as $part) {
    // Normalize to lowercase and remove extra spaces.
    $name = strtolower(trim($part[1]));
    $value = trim($part[2]);
    if ($name == 'style' || $name == 'class') {
      $attribs[$name] = $value;
    }
    else {
      $config[$name] = $value;
    }
  }
  return array($config, $attribs);
}

/**
 * Filter callback for a photo.
 */
function flickr_filter_callback_photo($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);
  if (isset($config['id'])) {
    if ($photo = flickr_photo_get_info($config['id'])) {
      if (!isset($config['size'])) {
        $config['size'] = variable_get('flickr_default_size', 'm');
      }
      if (!isset($config['mintitle'])) {
        $config['mintitle'] = variable_get('flickr_title_suppress_on_small', '100');
      }
      if (!isset($config['minmetadata'])) {
        $config['minmetadata'] = variable_get('flickr_metadata_suppress_on_small', '150');
      }
      switch ($config['size']) {
        case "x":
        case "y":
          drupal_set_message(t("Do not use a slideshow for a single image."), 'error');
          $config['size'] = variable_get('flickr_default_size', 'm');
          break;
      }
      $sizes = flickr_photo_sizes();
      if (flickr_in_array_r($sizes[$config['size']]['label'], flickr_photo_get_sizes($photo['id']))) {
        return theme('flickr_photo', array(
          'photo' => $photo,
          'size' => $config['size'],
          'attribs' => $attribs,
          'min_title' => $config['mintitle'],
          'min_metadata' => $config['minmetadata'],
        ));
      }
      else {
        // Generate an "empty" image of the requested size containing a message.
        $string = $sizes[$config['size']]['description'];
        preg_match("/\d*px/", $string, $matches);
        return '<span class="flickr-wrap" style="width: ' . $matches[0] . '; height: ' . $matches[0] . '; border:solid 1px;"><span class="flickr-empty">' . t('The requested image size is not available for this photo on Flickr (uploaded when this size was not offered yet). Try another size or re-upload this photo on Flickr.') . '</span></span>';
      }
    }
  }
  return '';
}

/**
 * Filter callback for a user.
 */
function flickr_filter_callback_album($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);

  if (!isset($config['id'])) {
    $config['id'] = '';
  }
  if (!isset($config['size'])) {
    $config['size'] = variable_get('flickr_default_size', 'm');
  }
  if (!isset($config['num'])) {
    $config['num'] = variable_get('flickr_photos_per_page', 20);
  }
  if (!isset($config['media'])) {
    $config['media'] = 'photos';
  }
  if (!isset($config['random'])) {
    $config['random'] = 'false';
  }
  if (!isset($config['heading'])) {
    $config['heading'] = variable_get('flickr_filter_heading', 'p');
  }
  if (!isset($config['tags'])) {
    $config['tags'] = '';
  }
  else {
    $config['tags'] = str_replace("/", ",", $config['tags']);
  }
  if (!isset($config['count'])) {
    $config['count'] = variable_get('flickr_counter', 1) ? 'true' : 'false';
  }
  if (!isset($config['mintitle'])) {
    $config['mintitle'] = variable_get('flickr_title_suppress_on_small', '100');
  }
  if (!isset($config['minmetadata'])) {
    $config['minmetadata'] = variable_get('flickr_metadata_suppress_on_small', '150');
  }
  // Choose between 'recent' or 'random' based on 'random' parameter.
  // Note that we abuse the $delta parameter pass the random value to override
  // the default of the counter display.
  $config['random'] = $config['random'] == 'true' ? 1 : 0;
  $type = flickr_get_id_type($config['id']);
  $config['id'] = $type == 'user' ? flickr_user_find_by_identifier($config['id']) : $config['id'];
  $output = _flickr_album($type, $config['id'], $config['num'], $config['size'], $config['media'], $config['tags'], '', $config['count'], $config['random'], $config['heading'], $config['mintitle'], $config['minmetadata']);
  return $output;
}

/**
 * Filter callback for a user's favorites.
 */
function flickr_filter_callback_favorites($matches) {
  list($config, $attribs) = flickr_filter_split_config($matches[1]);

  if (isset($config['id'])) {
    if (!isset($config['size'])) {
      $config['size'] = variable_get('flickr_default_size', 'm');
    }
    if (!isset($config['num'])) {
      $config['num'] = variable_get('flickr_photos_per_page', 20);
    }
    if (!isset($config['media'])) {
      $config['media'] = 'photos';
    }
    if (!isset($config['random'])) {
      $config['random'] = 'false';
    }
    if (!isset($config['heading'])) {
      $config['heading'] = variable_get('flickr_filter_heading', 'p');
    }
    if (!isset($config['tags'])) {
      $config['tags'] = '';
    }
    else {
      $config['tags'] = str_replace("/", ",", $config['tags']);
    }
    if (!isset($config['count'])) {
      $config['count'] = variable_get('flickr_counter', 1) ? 'true' : 'false';
    }
    if (!isset($config['mintitle'])) {
      $config['mintitle'] = variable_get('flickr_title_suppress_on_small', '100');
    }
    if (!isset($config['minmetadata'])) {
      $config['minmetadata'] = variable_get('flickr_metadata_suppress_on_small', '150');
    }
    // Choose between 'recent' or 'random' based on 'random' parameter.
    // Note that we abuse the $delta parameter pass the random value to override
    // the default of the counter display.
    $config['random'] = $config['random'] == 'true' ? 1 : 0;
    $type = flickr_get_id_type($config['id']);
    $config['id'] = $type == 'user' ? flickr_user_find_by_identifier($config['id']) : $config['id'];
    $output = _flickr_album('favorites', $config['id'], $config['num'], $config['size'], $config['media'], $config['tags'], '', $config['count'], $config['random'], $config['heading'], $config['mintitle'], $config['minmetadata']);
    return $output;
  }
  return '';
}
